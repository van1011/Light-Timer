#include <ESP8266WiFi.h>

const char* ssid = "xxx";
const char* password = "yyyy";
WiFiServer server(80);


String header;

const int output5 = 5;
const long timeoutTime = 2000;

void testTime(int rest);


void testTime(int rest_time){

  delay(rest_time);

  //flash leds after time is up
  
  for(int i = 0; i < 5; i++){
    digitalWrite(output5,HIGH);
    delay(500);
    digitalWrite(output5,LOW);
    delay(500);
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(output5, OUTPUT);
  digitalWrite(output5, LOW);

  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
 
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}



void loop(){
  WiFiClient client = server.available();   

  if (client) {            
                     
    Serial.println("New Client.");          
    String currentLine = "";                // make a String to hold incoming data from the client
    currentTime = millis();
    previousTime = currentTime;
    
    while (client.connected() && currentTime - previousTime <= timeoutTime) { 
      currentTime = millis();         
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();       
                
            // turns the GPIOs on and off
            
            digitalWrite(output5, LOW);
            
               
            
            // Display the HTML web page

            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            
            // CSS 
            client.println("<style>html { font-family: sans-serif; display: inline-block; margin-top: 150px;text-align: center;}");
            client.println(".p{ font-family: sans-serif}");
            client.println(".head{margin-bottom:100px;}");
            client.println(".button { background-color: #000B18; border: none; color: white; padding: 16px 40px; width: 150px;");
            client.println("text-decoration: none; font-size: 20px; margin: 2px; cursor: pointer;} </style></head>");
    
            // Web Page Heading
            client.println("<body><h1>LIGHT TIMER </h1>");
            
            client.println("<p><a href=\"/5/on\"><button class=\"button\">5 Min</button></a></p>");
            client.println("<p><a href=\"/15/on\"><button class=\"button\">15 Min</button></a></p>");
            client.println("<p><a href=\"/30/on\"><button class=\"button\">30 Min</button></a></p>");
            client.println("<p><a href=\"/45/on\"><button class=\"button\">45 Min</button></a></p>");
            client.println("<p><a href=\"/60/on\"><button class=\"button\">60 Min</button></a></p>");
            
            
            if (header.indexOf("GET /5/on") >= 0) {
              Serial.println("5 on");
              client.println("<p> 5 min timer selected </p>");
              testTime(300000);
              
            } else if (header.indexOf("GET /15/on") >= 0) {
              Serial.println("15 on");
              client.println("<p> 15 min timer selected </p>");
              testTime(900000);
              
            } else if (header.indexOf("GET /30/on") >= 0) {
              Serial.println("30 on");
              client.println("<p> 30 min timer selected </p>");
              testTime(1800000);
              
            } else if (header.indexOf("GET /45/on") >= 0) {
              Serial.println("45 on");
              client.println("<p> 45 min timer selected </p>");
              testTime(2700000);
              
            } else if (header.indexOf("GET /60/on") >= 0) {
              Serial.println("60 on");
              client.println("<p> 60 min timer selected </p>");
              testTime(6000000);
            }

            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    
    header = "";
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
